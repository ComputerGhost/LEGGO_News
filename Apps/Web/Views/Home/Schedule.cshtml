@model Web.ViewModels.ScheduleViewModel
@{
    ViewData["Title"] = "Schedule";
}

<h1>Schedule</h1>

<section>
    <form>
        <div class="d-flex mb-2">
            @foreach (var calendar in Model.Calendars)
            {
                <div class="form-check pr-3" style="color: @calendar.Color">
                    <input type="checkbox" class="form-check-input" id="@calendar.Name">
                    <label class="form-check-label" for="@calendar.Name">@calendar.Name</label>
                </div>
            }
        </div>
    </form>
</section>

<section class="mt-3">
    @{ 
        var today = DateTime.Today;

        var startOfMonth = new DateTime(today.Year, today.Month, 1);
        var startDate = startOfMonth;
        while (startDate.DayOfWeek != DayOfWeek.Monday)
            startDate = startDate.AddDays(-1);

        var endOfMonth = startOfMonth.AddMonths(1).AddDays(-1);
        var endDate = endOfMonth;
        while (endDate.DayOfWeek != DayOfWeek.Monday)
            endDate = endDate.AddDays(1);

        var date = startDate;
    }

    <!--
        Okay, so here's the idea...
        Let's make it interesting later.  For right now, let's just finish the ticket.
        *) Create a CreateCalendarMatrix or something method in the Calendar service, and move these render calculations there.
        1) Do not add navigating side-side or hitting the API to pull more info.
        1) Remove the API endpoints possibly (after some thought) as those won't be needed yet.  Or maybe keep 'em?  Think about it.'
        1) Pretty up the code that we have.
        1) REMOVE THE API KEY FROM THE CONFIGS!!!
        1) Make a ticket to move the configs to a common area.
        1) Make a ticket to add going left and right on the calendar.

        Additional thoughts from 5/11:
        1) Maybe have CalendarService class in the relevant apps, 
        and remove Calendars.CalendarService which is doing too much.
        1) Each app's Services.CalendarService can implement the stuff it's needing specifically.
        1) This will require moving the Calendar.Internal classes to be public of course.
    -->

    <table class="table">
        <tr>
            <th colspan="7">
                <h3 class="text-center m-0">Month 2022</h3>
            </th>
        </tr>
        <tr>
            <th>Monday</th>
            <th>Tuesday</th>
            <th>Wednesday</th>
            <th>Thursday</th>
            <th>Friday</th>
            <th>Saturday</th>
            <th>Sunday</th>
        </tr>
        @while (date <= endDate) {
            <tr>
                @do {
                    var className = date.Month == today.Month ? "" : "text-muted";
                    <td>
                        <h6 class="@className">
                            @date.Day
                        </h6>
                    </td>
                    date = date.AddDays(1);
                } while (date.DayOfWeek != DayOfWeek.Monday);
            </tr>
        }
    </table>

</section>